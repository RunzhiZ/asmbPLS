% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/asmbPLSDA.vote.predict.R
\name{asmbPLSDA.vote.predict}
\alias{asmbPLSDA.vote.predict}
\title{Using an asmbPLS-DA vote model for classification of new samples}
\usage{
asmbPLSDA.vote.predict(fit.results, X.matrix.new)
}
\arguments{
\item{fit.results}{The output of \code{\link{asmbPLSDA.vote.fit}}.}

\item{X.matrix.new}{A predictors matrix, whose predictors are the same as 
the predictors in model fitting.}
}
\value{
\item{Y_pred}{Predicted class for the new sampels.}
}
\description{
Function to make the classification using the weights and fitted model 
obtained from \code{\link{asmbPLSDA.vote.fit}}. The final classification 
results are the weighted classification using the decision rules included.
}
\examples{
## Use the example dataset
data(asmbPLSDA.example)
X.matrix = asmbPLSDA.example$X.matrix
X.matrix.new = asmbPLSDA.example$X.matrix.new
Y.matrix.multiclass = asmbPLSDA.example$Y.matrix.morethan2levels
X.dim = asmbPLSDA.example$X.dim
PLS.comp = asmbPLSDA.example$PLS.comp
quantile.comb.table.cv = asmbPLSDA.example$quantile.comb.table.cv

## Cross validaiton based on max Y
cv.results.max <- asmbPLSDA.cv(X.matrix = X.matrix, 
                               Y.matrix = Y.matrix.multiclass,
                               PLS.comp = 5, 
                               X.dim = X.dim, 
                               quantile.comb.table = quantile.comb.table.cv, 
                               outcome.type = "multiclass", 
                               method = "Max_Y")
quantile.comb.max <- cv.results.max$quantile_table_CV

## Cross validation using Euclidean distance of X super score
cv.results.EDX <- asmbPLSDA.cv(X.matrix = X.matrix, 
                               Y.matrix = Y.matrix.multiclass,
                               PLS.comp = 5, 
                               X.dim = X.dim, 
                               quantile.comb.table = quantile.comb.table.cv, 
                               outcome.type = "multiclass", 
                               method = "Euclidean_distance_X")
quantile.comb.EDX <- cv.results.EDX$quantile_table_CV

## Cross validation using PCA + Mahalanobis distance of Y
cv.results.PCAMDY <- asmbPLSDA.cv(X.matrix = X.matrix, 
                                  Y.matrix = Y.matrix.multiclass,
                                  PLS.comp = 5, 
                                  X.dim = X.dim, 
                                  quantile.comb.table = quantile.comb.table.cv, 
                                  outcome.type = "multiclass", 
                                  method = "Euclidean_distance_X")
quantile.comb.PCAMDY <- cv.results.PCAMDY$quantile_table_CV

#### vote list ####
cv.results.list = list(Max_Y = quantile.comb.max,
                       Euclidean_distance_X = quantile.comb.EDX,
                       PCA_Mahalanobis_distance_Y = quantile.comb.PCAMDY)

## vote models fit
vote.fit <- asmbPLSDA.vote.fit(X.matrix = X.matrix, 
                               Y.matrix = Y.matrix.multiclass, 
                               X.dim = X.dim, 
                               nPLS = c(2, 2, 2),
                               cv.results.list = cv.results.list, 
                               outcome.type = "multiclass",
                               method = "weighted")

## classification
vote.predict <- asmbPLSDA.vote.predict(vote.fit, X.matrix.new)

}
